create database retailsalesDB;
use retailsalesDB;

--customer Table
create table customer
(customer_id  int identity(1,1) primary key,
first_name varchar(50),
last_name varchar(50),
email varchar(100) unique,
join_date date);

--product Table
create table product
(product_id int identity(1,1) primary key,
name varchar(100),
category varchar(100),
price decimal(10,2),
stock_quantity int check(stock_quantity>=0));

alter table product 
alter column name varchar(100) not null;

--stores Table
create table stores
(store_id int identity(1,1 ) primary key,
name varchar(100),
location varchar(100));

--sales Table
create table sales
(sales_id int identity(1,1) primary key,
customer_id int ,
product_id int,
store_id int,
quantity int,
sales_date date,
total_amount decimal(10,2)
foreign key (customer_id) references customer(customer_id),
foreign key (product_id) references product(product_id),
foreign key (store_id) references stores(store_id));

--Insert customer
insert into customer
values('Bhavna','Katoch','bhavna@gmail.com','2024-01-23'),
('Rohit','Guleria','rohit@gmail.com','2024-03-12'),
('Ransh','Katoch','Ransh@gmail.com','2022-01-23'),
('Rivaan','Guleria','rivaan@gmail.com','2023-05-06');

--Insert product

insert into product
values('laptop','electronics',800.00,50),
('Headphones','electronics',50.00,200),
('Office chair','Furniture',120.00,30);

--Insert stores

insert into stores
values('Downtown Sore','Newyork'),
('Uptown Store','Chicago');

select * from sales

--Insert sales

insert into sales
values(1,1,1,1,'2024-09-12',800.00),
(2,2,1,2,'2024-12-22',100.00),
(3,3,2,1,'2023-10-06',120.00);


--To view all the data in the Products table:
SELECT * FROM product;

--to find all products in the Electronics category
SELECT * FROM product
WHERE category = 'electronics';

--To get the list of products sorted by price in descending order:

SELECT * FROM product
ORDER BY price DESC;
--want to see customer names and their email addresses:

SELECT first_name, last_name, email FROM customer;

--to find distinct categories of products (avoiding repetition)
SELECT DISTINCT category FROM product;


--To get the total number of sales in the Sales table:
select count(* ) as Total_sales from sales;

--To calculate the total revenue generated by all sales:
select sum(total_amount) as 'Total Revenue' from sales;

--To find the average price of products:
select AVG(price) as 'Avg price' from product;

--find all sales details, including customer names and product names:
select sales_id,first_name,last_name,name from sales s inner join customer c
on s.customer_id=c.customer_id inner join product p
on p.product_id=c.customer_id ;

--show all customers, even those who haven’t made a purchase yet.

select c.first_name,c.last_name from customer c left join sales s
on c. customer_id=s.customer_id;

--to see total revenue by store:
select st.store_id ,sum(total_amount) as 'Total Revenue' from sales sa
join stores st on sa.store_id=st.store_id group by st.store_id;

--show only stores with revenue greater than $500:
select name,st.store_id from stores st join sales sa 
on st.store_id=sa.store_id group by name, st.store_id having sum(sa.total_amount)>500 ;

--numbering the sales sequentially based on the date.
select sales_id,sales_date,total_amount,ROW_NUMBER() over(order by sales_date asc) as Sale_rank
from sales

--want to rank sales based on the total amount
select sales_id,total_amount,rank() over(order by total_amount desc) as sales_rank from sales;

--cumulative total of sales over time.
select sales_date, sum(total_amount) over (order by sales_date asc) as Running_total
 from sales;

 --create a view that shows total revenue by product:
 create view productRevenue as
 select name,sum(total_amount) as total_revenue from sales s
 join product p on s.product_id =p.product_id group by p.name;

 --query this view like a table:
 select * from productRevenue;

 --create an index on the sale_date column:(However , i have used very small data set , indexing is being used by very large data sets)
 create index idx_sale_date on sales(sales_date);

 select * from sales where sales_date='2024-09-12';

 --sale is recorded and the stock is updated atomically.
 Begin Transaction;

 update product set stock_quantity=stock_quantity-1
 where product_id=1;

 INSERT INTO Sales (customer_id, product_id, store_id, quantity, sales_date, total_amount)
VALUES (1, 1, 1, 1, GETDATE(), 800.00);
commit;

--Other Important queries:
--Total Sales by Store

select sum(total_amount)as store_revenue  from sales 
group by store_id order by store_revenue desc;

--Monthly Sales Trend
select FORMAT(sales_date, 'yyyy-MM') AS month ,sum(total_amount)as Monthly_revenue
from sales group by  FORMAT(sales_date, 'yyyy-MM')ORDER BY month;

--Best-Selling Products
select p.name as ProductName , sum(quantity) as TotalQuantity from sales s
join product p on s.product_id=p.product_id group by p.name order by TotalQuantity desc;





